/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.clothing.store.manager.view;

import com.mycompany.clothing.store.manager.interfaces.IClothingController;
import com.mycompany.clothing.store.manager.domain.Clothing;
import com.mycompany.clothing.store.manager.domain.dto.ClothingResponseDTO;
import com.mycompany.clothing.store.manager.domain.dto.ShirtResponseDTO;
import com.mycompany.clothing.store.manager.domain.enums.ClothingPiece;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import com.mycompany.clothing.store.manager.domain.dto.PantResponseDTO;
import com.mycompany.clothing.store.manager.domain.dto.PantyResponseDTO;
import javax.swing.JTable;

/**
 *
 * @author moise
 */
public class Table extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Table.class.getName());
    public IClothingController clothingController;

    /**
     * Creates new form Remove
     *
     * @param em
     */
    public Table(IClothingController shirtController) {
        initComponents();
        this.clothingController = shirtController;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1480, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void fillTable(List<ClothingResponseDTO> list, ClothingPiece p) {
        DefaultTableModel model = new DefaultTableModel();
        fillTableAux(model, p);

        if (list == null) {
            return;
        }

        if (!list.isEmpty()) {
            switch (p) {
                case ClothingPiece.SHIRT -> {
                    for (ClothingResponseDTO data : list) {
                        ShirtResponseDTO shirtData = (ShirtResponseDTO) data;
                        model.addRow(new Object[]{
                            shirtData.id(),
                            shirtData.color(),
                            shirtData.quantity(),
                            shirtData.brand(),
                            shirtData.gender(),
                            shirtData.clothingType(),
                            shirtData.pattern(),
                            shirtData.fabric(),
                            shirtData.style(),
                            shirtData.price(),
                            shirtData.size(),
                            shirtData.collar(),
                            shirtData.sleeve(),
                            shirtData.closureType(),
                            shirtData.pocket()
                        });
                    }
                }
                case ClothingPiece.PANT -> {
                    for (ClothingResponseDTO data : list) {
                        PantResponseDTO pantData = (PantResponseDTO) data;
                        model.addRow(new Object[]{
                            pantData.id(),
                            pantData.color(),
                            pantData.quantity(),
                            pantData.brand(),
                            pantData.gender(),
                            pantData.clothingType(),
                            pantData.pattern(),
                            pantData.fabric(),
                            pantData.style(),
                            pantData.price(),
                            pantData.size(),
                            pantData.length(),
                            pantData.hemType(),
                            pantData.waistType(),
                            pantData.closureType(),
                            pantData.pocket()
                        });
                    }
                }
                case ClothingPiece.PANTY -> {
                    for (ClothingResponseDTO data : list) {
                        PantyResponseDTO dto = (PantyResponseDTO) data;
                        model.addRow(new Object[]{
                            dto.id(),
                            dto.color(),
                            dto.quantity(),
                            dto.brand(),
                            dto.gender(),
                            dto.clothingType(),
                            dto.pattern(),
                            dto.fabric(),
                            dto.style(),
                            dto.price(),
                            dto.lining(),
                            dto.cut(),
                            dto.detail(),
                            dto.waist()
                        });
                    }
                }

            }

        }
        jTable1.setModel(model);
    }

    private void fillTableAux(DefaultTableModel model, ClothingPiece p) {
        model.addColumn("ID");
        model.addColumn("COR");
        model.addColumn("QUANTIDADE");
        model.addColumn("MARCA");
        model.addColumn("GENERO");
        model.addColumn("TIPO DE ROUPA");
        model.addColumn("ESTAMPA");
        model.addColumn("TECIDO");
        model.addColumn("ESTILO");

        switch (p) {
            case ClothingPiece.SHIRT -> {
                model.addColumn("VALOR");
                model.addColumn("TAMANHO");
                model.addColumn("GOLA");
                model.addColumn("MANGA");
                model.addColumn("TIPO DE FECHAMENTO");
                model.addColumn("QUANTIDADE DE BOLSOS");
            }
            case ClothingPiece.PANT -> {
                model.addColumn("VALOR");
                model.addColumn("NUMERAÇÃO");
                model.addColumn("COMPRIMENTO");
                model.addColumn("TIPO DE BARRA");
                model.addColumn("TIPO DE CINTURA");
                model.addColumn("TIPO DE FECHAMENTO");
                model.addColumn("QUANTIDADE DE BOLSOS");
            }
            case ClothingPiece.PANTY -> {
                model.addColumn("VALOR");
                model.addColumn("FORRO");
                model.addColumn("CORTE");
                model.addColumn("DETALHE");
                model.addColumn("CINTURA");
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
